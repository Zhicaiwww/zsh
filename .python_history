import torch
torch.cuda.is_available()
exit
exit()
import taming
exit
exit()
import taming
from taming.modules.vqvae.quantize import VectorQuantizer2 as VectorQuantizer
import taming.modules.vqvae.quantize
from taming.modules.vqvae.quantize import VectorQuantizer2 as VectorQuantizer
exit()
from taming.modules.vqvae.quantize import VectorQuantizer2 as VectorQuantizer
exit()
import numpy as np
 np.random.random_sample(1)
np.random.random_sample(1)
np.random.random_sample(1)<0.5
 cd /home/zhicai/poseVideo/custom-diffusion ; /usr/bin/env /data/zhicai/miniconda3/envs/ldm/bin/python /home/zhicai/.vscode-server/extensions/ms-python.python-2023.4.0/pythonFiles/lib/python/debugpy/adapter/../../debugpy/launcher 49545 -- /home/zhicai/poseVideo/custom-diffusion/src/finetune_data_wpose.py 
exit()_
exit()
import torch
a = torch.randn([2,2],requires_grad=True)
a.detach().requires_grad()
a.detach().requires_grad
b = 2 * a.detach()
b.requires_grad
exit()
os.system(f'python sample.py  --prompt "{prompt}" --delta_ckpt  --ckpt Stable-diffusion/sd-v1-4-full-ema.ckpt --n_samples 8 --n_iter 2')
exit()
subprocess.check_output(shlex.split(f"python train.py --base configs/custom-diffusion/finetune_addtoken2.yaml -t --gpus 0,1 --resume-from-checkpoint-custom Stable-diffusion/sd-v1-4-full-ema.ckpt --caption '<new1> dog' --datapath data/dog --modifier_token <new1> --name dog --no-test --reg_scale {scale} --norm_scale {norm_scale} --postfix reg_{scale}_norm_{norm_scale}_{reg_p.replace(' ','_')}_{tag} --reg_prompt {reg_p} --new_prompt 'a <new1> dog'"))
exit
exit()
print(parse_prompt_attention('a (<new1>:1.5) dog, a <new1> cat'))
exit()
import functools; print(functools)
exit()
from safetensors.torch import safe_open
exit()
from safetensors.torch import safe_open
exit()
parser.add_argument('--name', type=str, default='up_blocks.2.attentions.1.transformer_blocks.0.attn2')
exit
exit()
from huggingface.hub import hf_hub_download
exit()
import huggingface_hub
import os
# os.environ['https_proxy'] = 'http://localhost:8014'
# os.environ['http_proxy'] = 'http://localhost:8014'
# # 验证设置是否成功
# print(os.environ['https_proxy'])
huggingface_hub.login('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')
exit
exit()
import os
os.cpu_count(
)
conda activate ldm
exit()
